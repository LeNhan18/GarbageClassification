# test_model1_camera.py
import cv2
import numpy as np
from tensorflow.keras.models import load_model
import json
import os
from utils import preprocess_image, predict_single_image

from TrainModel1 import train_generator

# --- Load model ---
model_path = 'model1_binary_recyclable.keras'  # ho·∫∑c model1_best.keras
model = load_model(model_path)
# T·∫°o l·∫°i √°nh x·∫° l·ªõp n·∫øu kh√¥ng c√≥ file json
class_mapping = train_generator.class_indices
inv_class_mapping = {v: k for k, v in class_mapping.items()}
with open('class_mapping.json', 'w') as f:
    json.dump(inv_class_mapping, f)

# --- Load class mapping ---
# N·∫øu b·∫°n c√≥ file class_mapping.json
try:
    with open('class_mapping.json', 'r') as f:
        class_mapping = json.load(f)
    print("ƒê√£ load √°nh x·∫° l·ªõp.")
except:
    # N·∫øu kh√¥ng c√≥, b·∫°n t·ª± ƒë·ªãnh nghƒ©a:
    class_mapping = {0: 'Non-Recyclable', 1: 'Recyclable'}  # ho·∫∑c ng∆∞·ª£c l·∫°i n·∫øu model b·∫°n h·ªçc theo chi·ªÅu ng∆∞·ª£c


# --- H√†m x·ª≠ l√Ω ·∫£nh ---
def preprocess_image(img, target_size=(150, 150)):
    img_resized = cv2.resize(img, target_size)
    img_array = np.expand_dims(img_resized, axis=0)
    img_array = img_array / 255.0  # normalize gi·ªëng l√∫c train
    return img_array


def test_model():
    print("=== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA MODEL ===")
    
    # --- Load model v√† mapping ---
    model_path = 'model1_binary_recyclable.keras'
    mapping_path = 'class_mapping.json'
    
    try:
        model = load_model(model_path)
        print("ƒê√£ t·∫£i m√¥ h√¨nh th√†nh c√¥ng")
        
        with open(mapping_path, 'r') as f:
            class_mapping = json.load(f)
        print("ƒê√£ t·∫£i mapping th√†nh c√¥ng")
    except Exception as e:
        print(f"L·ªói khi t·∫£i m√¥ h√¨nh ho·∫∑c mapping: {e}")
        return

    # --- M·ªü camera ---
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print(" Kh√¥ng th·ªÉ m·ªü camera")
        return

    print("üöÄ Camera ƒë√£ s·∫µn s√†ng. B·∫•m 'q' ƒë·ªÉ tho√°t.")
    
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera")
            break

        # V·∫Ω khung gi·ªØa ·∫£nh
        h, w = frame.shape[:2]
        size = min(h, w) // 2
        x1 = (w - size) // 2
        y1 = (h - size) // 2
        x2 = x1 + size
        y2 = y1 + size
        
        # L·∫•y ·∫£nh trong khung
        roi = frame[y1:y2, x1:x2]
        
        # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
        img = cv2.resize(roi, (128, 128))
        img = img / 255.0
        img = np.expand_dims(img, axis=0)
        
        # D·ª± ƒëo√°n
        prediction = model.predict(img)[0]
        class_index = np.argmax(prediction)
        confidence = float(prediction[class_index])
        label = "T√°i ch·∫ø" if class_index == 1 else "Kh√¥ng t√°i ch·∫ø"
        
        # V·∫Ω khung v√† k·∫øt qu·∫£
        color = (0, 255, 0) if label == "T√°i ch·∫ø" else (0, 0, 255)
        cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
        cv2.putText(frame, f"{label} ({confidence*100:.1f}%)", 
                   (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)
        
        cv2.imshow('Ph√¢n Lo·∫°i R√°c Th·∫£i', frame)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
    print("ƒê√£ ƒë√≥ng camera v√† k·∫øt th√∫c ch∆∞∆°ng tr√¨nh")

def test_model1_images():
    print("\n=== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA MODEL 1 V·ªöI ·∫¢NH ===")
    
    # --- Load model ---
    model_path = os.path.join('model', 'model1_binary_recyclable.keras')
    try:
        model = load_model(model_path)
        print("ƒê√£ t·∫£i m√¥ h√¨nh th√†nh c√¥ng")
    except Exception as e:
        print(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
        return
    
    # Th∆∞ m·ª•c test
    test_dir = 'Z:\\GarbageClassification\\data\\test'
    
    # Test v·ªõi ·∫£nh t·ª´ m·ªói th∆∞ m·ª•c
    for class_name in ['recyclable', 'non_recyclable']:
        class_dir = os.path.join(test_dir, class_name)
        if not os.path.exists(class_dir):
            continue
            
        print(f"\nKi·ªÉm tra ·∫£nh trong th∆∞ m·ª•c: {class_name}")
        
        # L·∫•y 5 ·∫£nh ƒë·∫ßu ti√™n
        for img_name in os.listdir(class_dir)[:5]:
            img_path = os.path.join(class_dir, img_name)
            print(f"\n·∫¢nh: {img_name}")
            print(f"L·ªõp th·ª±c t·∫ø: {class_name}")
            
            result = predict_single_image(model, img_path)
            if result:
                print(f"D·ª± ƒëo√°n: {result['predicted_class']}")
                print(f"ƒê·ªô tin c·∫≠y: {result['probability']*100:.2f}%")
                
                # Hi·ªÉn th·ªã ·∫£nh
                img = cv2.imread(img_path)
                if img is not None:
                    color = (0, 255, 0) if result['predicted_class'] == 'T√°i ch·∫ø' else (0, 0, 255)
                    cv2.putText(img, f"{result['predicted_class']} ({result['probability']*100:.1f}%)",
                              (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)
                    cv2.imshow(f"Test - {img_name}", img)
                    cv2.waitKey(1000)  # Hi·ªÉn th·ªã 1 gi√¢y
                    cv2.destroyAllWindows()

if __name__ == '__main__':
    test_model()

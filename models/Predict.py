# predict.py
# D·ª± ƒëo√°n 1 ·∫£nh: T√°i ch·∫ø / Kh√¥ng ‚Üí N·∫øu t√°i ch·∫ø th√¨ ph√¢n lo·∫°i chi ti·∫øt

import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import os

# --- C·∫•u h√¨nh ---
model1_path = 'models/model1_binary_recyclable.h5'
model2_path = 'models/model2_multiclass_recyclable.h5'
img_size_binary = (150, 150)
img_size_multiclass = (150, 150)  # d√πng CNN n√™n gi·ªØ nguy√™n

# --- Load model ---
model1 = load_model(model1_path)
model2 = load_model(model2_path)

# --- H√†m d·ª± ƒëo√°n ---
def predict_image(img_path):
    img = image.load_img(img_path, target_size=img_size_binary)
    img_array = image.img_to_array(img) / 255.0
    img_array_expanded = np.expand_dims(img_array, axis=0)

    # D·ª± ƒëo√°n t√°i ch·∫ø / kh√¥ng t√°i ch·∫ø
    pred_binary = model1.predict(img_array_expanded)[0][0]
    if pred_binary < 0.5:
        return "‚ùå Kh√¥ng t√°i ch·∫ø"
    else:
        # N·∫øu l√† t√°i ch·∫ø ‚Üí ph√¢n lo·∫°i chi ti·∫øt
        img_multiclass = image.load_img(img_path, target_size=img_size_multiclass)
        img_array_multi = image.img_to_array(img_multiclass) / 255.0
        img_array_multi = np.expand_dims(img_array_multi, axis=0)

        pred_multi = model2.predict(img_array_multi)
        class_index = np.argmax(pred_multi)
        class_labels = os.listdir('data/recyclable')
        class_labels.sort()  # ƒë·∫£m b·∫£o ƒë√∫ng th·ª© t·ª±
        return f"‚ôªÔ∏è T√°i ch·∫ø: {class_labels[class_index]}"

# --- D√πng th·ª≠ ---
if __name__ == '__main__':
    img_path = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh c·∫ßn d·ª± ƒëo√°n: ")
    if not os.path.exists(img_path):
        print("·∫¢nh kh√¥ng t·ªìn t·∫°i!")
    else:
        result = predict_image(img_path)
        print("\nüéØ K·∫øt qu·∫£ d·ª± ƒëo√°n:", result)